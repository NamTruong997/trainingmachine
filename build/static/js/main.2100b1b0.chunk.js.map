{"version":3,"sources":["components/page/screen/Sreen.tsx","components/page/mainpage/MainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sreen","className","SignInPage","type","id","name","htmlFor","icon","faArrowRight","faArrowUp","faArrowDown","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAyCeA,G,MAtCD,WACZ,OACE,sBAAKC,UAAU,QAAf,UACE,0BAASA,UAAU,gBAAnB,UACE,sBAAKA,UAAU,oBAAf,eAAqC,sBAAMA,UAAU,UAAhB,mBACrC,qBAAKA,UAAU,wBAAf,SACE,qBAAKA,UAAU,2BAAf,uBAIJ,0BAASA,UAAU,cAAnB,UACE,qBAAKA,UAAU,oBAAf,SACE,wCAGF,sBAAKA,UAAU,mBAAf,UACE,sBAAMA,UAAU,mBAAhB,gBADF,IAC+C,sBAAMA,UAAU,mBAAhB,qBAE/C,sBAAKA,UAAU,qBAAf,UACE,sCACA,gCACE,sBAAMA,UAAU,oBAAhB,gBAA6C,8CAInD,0BAASA,UAAU,gBAAnB,UACE,sBAAKA,UAAU,sBAAf,UACE,uCACA,uCACA,uCACA,0CAEF,gDCsBOC,G,MAnDI,WACjB,OACE,sBAAKD,UAAU,WAAf,UACE,0BAASA,UAAU,iBAAnB,UACE,uBAAOE,KAAK,QAAQC,GAAG,SAASC,KAAK,WACrC,uBAAOC,QAAQ,SAAf,kBAEA,uBAAOH,KAAK,QAAQC,GAAG,SAASC,KAAK,WACrC,uBAAOC,QAAQ,SAAf,oBAEF,0BAASL,UAAU,gBAAnB,UACE,uDACA,cAAC,EAAD,IACA,sBAAKA,UAAU,mBAAf,UACE,uBAAOE,KAAK,QAAQC,GAAG,UAAUC,KAAK,WACtC,uBAAOC,QAAQ,UAAf,SACE,cAAC,IAAD,CAAiBC,KAAMC,QAGzB,uBAAOL,KAAK,QAAQC,GAAG,UAAUC,KAAK,WACtC,uBAAOC,QAAQ,UAAf,SACE,cAAC,IAAD,CAAiBC,KAAME,QAGzB,uBAAON,KAAK,QAAQC,GAAG,UAAUC,KAAK,WACtC,uBAAOC,QAAQ,UAAf,SACE,cAAC,IAAD,CAAiBC,KAAMG,QAGzB,uBAAOP,KAAK,QAAQC,GAAG,UAAUC,KAAK,WACtC,uBAAOC,QAAQ,UAAf,uBAIJ,0BAASL,UAAU,kBAAnB,UACE,uBAAOE,KAAK,QAAQC,GAAG,QAAQC,KAAK,WACpC,uBAAOC,QAAQ,QAAf,kBAEA,uBAAOH,KAAK,QAAQC,GAAG,QAAQC,KAAK,WACpC,uBAAOC,QAAQ,QAAf,kBAEA,uBAAOH,KAAK,QAAQC,GAAG,QAAQC,KAAK,WACpC,uBAAOC,QAAQ,QAAf,kBAEA,uBAAOH,KAAK,QAAQC,GAAG,QAAQC,KAAK,WACpC,uBAAOC,QAAQ,QAAf,yB,eCnCOK,MAZf,WACE,OACE,sBAAMV,UAAU,MAAhB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOW,KAAK,IAAIC,OAAK,EAACC,UAAWZ,WCGvBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2100b1b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Sreen.scss\";\r\n\r\nconst Sreen = () => {\r\n  return (\r\n    <div className=\"sreen\">\r\n      <section className=\"sreen__header\">\r\n        <div className=\"sreen__header--ch\">CH<span className=\"flicker\">10</span></div>\r\n        <div className=\"sreen__header--status\">\r\n          <div className=\"sreen__header--statusOff\">FAIL</div>\r\n          {/* <div className=\"sreen__header--statusOn\">TUNELING</div> */}\r\n        </div>\r\n      </section>\r\n      <section className=\"sreen__body\">\r\n        <div className=\"sreen__body--left\">\r\n          <span>RX</span>\r\n          {/* <span>TX</span> */}\r\n        </div>\r\n        <div className=\"sreen__body--mid\">\r\n          <span className=\"sreen__body--big\">15</span>.<span className=\"sreen__body--big\">4500</span>\r\n        </div>\r\n        <div className=\"sreen__body--right\">\r\n          <div>MHz</div>\r\n          <div>\r\n            <span className=\"sreen__body--watt\">20</span><span>w</span>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section className=\"sreen__footer\">\r\n        <div className=\"sreen__footer--mode\">\r\n          <span>CW1</span>\r\n          <span>CW2</span>\r\n          <span>CW3</span>\r\n          <span>CW4</span>\r\n        </div>\r\n        <div>14.8v</div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sreen;\r\n","import { faArrowDown, faArrowRight, faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport Sreen from \"../screen/Sreen\";\r\nimport \"./MainPage.scss\";\r\n\r\nconst SignInPage = () => {\r\n  return (\r\n    <div className=\"mainpage\">\r\n      <section className=\"mainpage__left\">\r\n        <input type=\"radio\" id=\"power1\" name=\"direct\" />\r\n        <label htmlFor=\"power1\">TUNE</label>\r\n\r\n        <input type=\"radio\" id=\"power2\" name=\"direct\" />\r\n        <label htmlFor=\"power2\">OFF</label>\r\n      </section>\r\n      <section className=\"mainpage__mid\">\r\n        <h2>HF TRANSCEIVER VRU611</h2>\r\n        <Sreen />\r\n        <div className=\"mainpage__direct\">\r\n          <input type=\"radio\" id=\"direct1\" name=\"direct\" />\r\n          <label htmlFor=\"direct1\">\r\n            <FontAwesomeIcon icon={faArrowRight} />\r\n          </label>\r\n\r\n          <input type=\"radio\" id=\"direct2\" name=\"direct\" />\r\n          <label htmlFor=\"direct2\">\r\n            <FontAwesomeIcon icon={faArrowUp} />\r\n          </label>\r\n\r\n          <input type=\"radio\" id=\"direct3\" name=\"direct\" />\r\n          <label htmlFor=\"direct3\">\r\n            <FontAwesomeIcon icon={faArrowDown} />\r\n          </label>\r\n\r\n          <input type=\"radio\" id=\"direct4\" name=\"direct\" />\r\n          <label htmlFor=\"direct4\">PRE</label>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"mainpage__right\">\r\n        <input type=\"radio\" id=\"mode1\" name=\"direct\" />\r\n        <label htmlFor=\"mode1\">MODE</label>\r\n\r\n        <input type=\"radio\" id=\"mode2\" name=\"direct\" />\r\n        <label htmlFor=\"mode2\">SCAN</label>\r\n\r\n        <input type=\"radio\" id=\"mode3\" name=\"direct\" />\r\n        <label htmlFor=\"mode3\">BLIT</label>\r\n\r\n        <input type=\"radio\" id=\"mode4\" name=\"direct\" />\r\n        <label htmlFor=\"mode4\">WRI</label>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignInPage;\r\n","import SignInPage from 'components/page/mainpage/MainPage';\r\nimport React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <main className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={SignInPage}/>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}